{"version":3,"sources":["assets/logo.svg","views/converter/Converter2.js"],"names":["module","exports","Converter","props","handleSubmit","state","accessKey","conversationId","limit","offset","self","setState","isLoading","success","toast","error","axios","method","url","headers","data","then","response","status","console","log","items","changeMessage","catch","showDatatables","exportCSV","pagination","search","multiColumnSearch","options","noDataText","defaultSortName","defaultSortOrder","dataField","isKey","dataSort","searchable","thStyle","whiteSpace","tdStyle","final","key","showForms","style","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","row","md","type","disabled","value","onChange","e","target","min","max","color","loading","onClick","className","src","logo","alt","height","width","marginBottom","this","Component"],"mappings":"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","file":"static/js/5.9def6767.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.16fe7527.svg\";","import { CCard, CCardBody, CCardGroup, CCol, CContainer, CFormGroup, CRow, CInput, CButton, CLabel } from '@coreui/react';\nimport React, { Component } from 'react'\nimport {BootstrapTable, TableHeaderColumn} from 'react-bootstrap-table';\nimport { HashLoader } from 'react-spinners';\nimport logo from '../../assets/logo.svg';\nimport axios from 'axios';\nimport {toast, ToastContainer} from 'react-toastify'\nimport 'react-bootstrap-table/dist/react-bootstrap-table-all.min.css';\nimport 'react-toastify/dist/ReactToastify.min.css'\n\nclass Converter extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            isLoading: false,\n            success: true,\n            conversationId: '',\n            accessKey: '',\n            limit: 10,\n            offset: 0,\n            items: [],\n            data: []\n        }\n    }\n\n    handleSubmit = () => {\n        const { accessKey, conversationId, limit, offset } = this.state\n        var self = this;\n        this.setState({\n            isLoading: true,\n            success: true\n        })\n        if((accessKey === '' && conversationId === '') || (accessKey === null && conversationId === null)) {\n            self.setState({\n               isLoading: false,\n               success: true\n           }) \n            toast.error(\"Not found!\")\n        } else {\n            axios({\n                method: 'GET',\n                url: 'https://conversations.messagebird.com/v1/conversations/' + conversationId + '/messages',\n                headers: {\n                    'Authorization': 'AccessKey ' + accessKey,\n                    'Access-Control-Allow-Origin': '*',\n                },\n                data: {\n                    limit: limit,\n                    offset: offset\n                }\n            })\n            .then((response) => {\n                if(response.status === 200) {\n                    console.log(response)\n                    self.setState({\n                        items: response.data.items\n                    })\n                    self.changeMessage()\n                    self.setState({\n                        isLoading: false,\n                        success: true,\n                        \n                    })\n\n                }\n            })\n            .catch(function(error){\n                if(error.response) {\n                    if(error.response.status === 401) {\n                        self.setState({\n                            isLoading: false,\n                            success: false,\n                        })\n                        toast.error(\"Unathorized!\")\n                    }\n                    else {\n                        self.setState({\n                            isLoading: false,\n                            success: false,\n                        })\n                        toast.error(\"Something went wrong!\")\n                    }\n                } else {\n                    self.setState({\n                        isLoading: false,\n                        success: false,\n                    })\n                    toast.error(\"Something went wrong!\")\n                }\n            })\n        }\n    }\n\n    showDatatables = () => {\n        const opt = {\n            noDataText: 'No data yet...',\n            defaultSortName: 'createdDatetime',\n            defaultSortOrder: 'desc'\n        }\n        return (\n            <BootstrapTable data={ this.state.data } exportCSV pagination search multiColumnSearch options={opt}>\n                <TableHeaderColumn dataField='id' isKey={ true } dataSort>ID</TableHeaderColumn>\n                <TableHeaderColumn dataField='channelId' searchable dataSort thStyle={{whiteSpace: 'normal'}} tdStyle={{whiteSpace: 'normal'}}>Channel ID</TableHeaderColumn>\n                <TableHeaderColumn dataField='from' searchable dataSort thStyle={{whiteSpace: 'normal'}} tdStyle={{whiteSpace: 'normal'}}>From</TableHeaderColumn>\n                <TableHeaderColumn dataField='to' searchable dataSort thStyle={{whiteSpace: 'normal'}} tdStyle={{whiteSpace: 'normal'}}>To</TableHeaderColumn>\n                <TableHeaderColumn dataField='content' searchable dataSort thStyle={{whiteSpace: 'normal'}} tdStyle={{whiteSpace: 'normal'}}>Content</TableHeaderColumn>\n                <TableHeaderColumn dataField='createdDatetime' dataSort thStyle={{whiteSpace: 'normal'}} tdStyle={{whiteSpace: 'normal'}}>Created On</TableHeaderColumn>\n            </BootstrapTable>\n        )\n    }\n\n    changeMessage = () => {\n        const { items } = this.state\n        var final = []\n\n        for (var key in items){\n            final[key] = {\n            \"id\" : items[key][\"id\"],\n            \"from\" : items[key][\"from\"],\n            \"to\" : items[key][\"to\"],\n            \"channelId\" : items[key][\"channelId\"],\n            \"createdDatetime\" : items[key][\"createdDatetime\"],\n            \"updatedDatetime\" : items[key][\"updatedDatetime\"],\n            \"content\": items[key][\"content\"][\"text\"]\n            };\n        }\n\n        this.setState({\n            data: final\n        })\n\n        console.log(final)\n    }\n\n    showForms = () => {\n        const { isLoading, success, conversationId, accessKey, offset, limit } = this.state;\n        return (\n            <div style={{'marginTop': '2em'}}>\n                <ToastContainer\n                    position=\"top-right\"\n                    autoClose={5000}\n                    hideProgressBar={false}\n                    newestOnTop={false}\n                    closeOnClick\n                    rtl={false}\n                    pauseOnFocusLoss\n                    draggable\n                    pauseOnHover\n                />\n                <CFormGroup row>\n                    <CCol md=\"4\">\n                        <CLabel style={{'fontSize': 'small'}}>Conv. ID</CLabel>\n                    </CCol>\n                    <CCol md=\"8\">\n                        <CInput type=\"text\" disabled={isLoading} value={conversationId} onChange={(e) => this.setState({ conversationId: e.target.value })} />\n                    </CCol>\n                </CFormGroup>\n                <CFormGroup row>\n                    <CCol md=\"4\">\n                        <CLabel style={{'fontSize': 'small'}}>Access Key</CLabel>\n                    </CCol>\n                    <CCol md=\"8\">\n                        <CInput type=\"text\" disabled={isLoading} value={accessKey} onChange={(e) => this.setState({ accessKey: e.target.value })} />\n                    </CCol>\n                </CFormGroup>\n                <CFormGroup row>\n                    <CCol md=\"4\">\n                        <CLabel style={{'fontSize': 'small'}}>Limit</CLabel>\n                    </CCol>\n                    <CCol md=\"8\">\n                        <CInput type=\"number\" min=\"0\" max=\"100\" disabled={isLoading} value={limit} onChange={(e) => this.setState({ limit: e.target.value })} />\n                    </CCol>\n                </CFormGroup>\n                <CFormGroup row>\n                    <CCol md=\"4\">\n                        <CLabel style={{'fontSize': 'small'}}>Offset</CLabel>\n                    </CCol>\n                    <CCol md=\"8\">\n                        <CInput type=\"number\" min=\"0\" max=\"100\" disabled={isLoading} value={offset} onChange={(e) => this.setState({ offset: e.target.value })} />\n                    </CCol>\n                </CFormGroup>\n                <CFormGroup row>\n                    <CCol md=\"12\">\n                        {\n                            isLoading ? \n                            <center>\n                                <HashLoader color={'#123abc'} loading={isLoading} /><br/> Please wait...\n                            </center>\n                            :\n                            <center>\n                                <CButton color=\"success\" disabled={isLoading} onClick={() => this.handleSubmit()}>\n                                    Convert\n                                </CButton>\n                            </center>\n                        }\n                    </CCol>\n                </CFormGroup>\n                <hr/>\n                <h2>Result</h2>\n                {\n                    isLoading ? \n                    true \n                    :\n                    (\n                        success ?\n                        this.showDatatables()\n                        \n                        :\n                        true\n                    )\n                }\n                <CRow>\n                    \n                </CRow>\n            </div>\n        )\n    }\n\n    render() {\n        return (\n            <>\n                <div className=\"app flex-row align-items-center login-body\">\n                    <CContainer>\n                        <CRow className=\"justify-content-center\">\n                            \n                            <CCol md=\"8\">\n                                <CCardGroup>\n                                    <CCard className=\"p-4\">\n                                        <CCardBody>\n                                            <img src={logo} alt=\"mb-logo\" className=\"mb-logo\" style={{height: 'auto', width: '8em', marginBottom: '2em'}}/>\n                                            <h2>Converter</h2>\n                                            {this.showForms()}\n                                        </CCardBody>\n                                    </CCard>\n                                </CCardGroup>\n                            </CCol>\n                        </CRow>\n                    </CContainer>\n                </div>\n            </>\n        )\n    }\n}\n\nexport default Converter;"],"sourceRoot":""}