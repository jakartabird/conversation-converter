{"version":3,"sources":["views/converter/Converter.js"],"names":["Converter","props","handleSubmit","state","accessKey","conversationId","self","setState","isLoading","success","toast","error","axios","method","url","headers","then","response","status","console","log","items","data","changeMessage","catch","final","key","this","style","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","row","md","type","disabled","value","onChange","e","target","color","loading","onClick","Component"],"mappings":"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","file":"static/js/9.ab2b3b92.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {\n    Button,\n    Col,\n    FormGroup,\n    Input,\n    Label,\n    Row,\n  } from 'reactstrap'\nimport { HashLoader } from 'react-spinners';\nimport 'react-toastify/dist/ReactToastify.min.css';\n// import 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\nimport axios from 'axios';\nimport { toast, ToastContainer } from 'react-toastify';\n// import BootstrapTable from 'react-bootstrap-table-next';\nimport 'react-toastify/dist'\n\nclass Converter extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoading: false,\n            success: true,\n            conversationId: '1a1214d778f94210b3f739d7c854836e',\n            accessKey: 'NyEWQWwdwGndraCGHMZoXjNag',\n            items: []\n        }\n    }\n    \n    handleSubmit = () => {\n        const { accessKey, conversationId } = this.state\n        var self = this;\n        this.setState({\n            isLoading: true,\n            success: true\n        })\n        if((accessKey === '' && conversationId === '') || (accessKey === null && conversationId === null)) {\n            self.setState({\n               isLoading: false,\n               success: true\n           }) \n            toast.error(\"Not found!\")\n        } else {\n            axios({\n                method: 'GET',\n                url: 'http://localhost:8080/https://conversations.messagebird.com/v1/conversations/' + conversationId + '/messages',\n                headers: {\n                    'Authorization': 'AccessKey ' + accessKey,\n                    'Access-Control-Allow-Origin': '*',\n                    'origin': 'chrome',\n                    'x-requested-with': 'chrome'\n                }\n            })\n            .then((response) => {\n                if(response.status === 200) {\n                    console.log(response)\n                    self.setState({\n                        items: response.data.items\n                    })\n                    self.changeMessage()\n                    self.setState({\n                        isLoading: false,\n                        success: true,\n                        \n                    })\n\n                }\n            })\n            .catch(function(error){\n                if(error.response) {\n                    if(error.response.status === 401) {\n                        self.setState({\n                            isLoading: false,\n                            success: false,\n                        })\n                        toast.error(\"Unathorized!\")\n                    }\n                    else {\n                        self.setState({\n                            isLoading: false,\n                            success: false,\n                        })\n                        toast.error(\"Something went wrong!\")\n                    }\n                } else {\n                    self.setState({\n                        isLoading: false,\n                        success: false,\n                    })\n                    toast.error(\"Something went wrong!\")\n                }\n            })\n        }\n    }\n\n    changeMessage = () => {\n        const { items } = this.state\n        var final = []\n\n        for (var key in items){\n            final[key] = {\n            \"id\" : items[key][\"id\"],\n            \"from\" : items[key][\"from\"],\n            \"to\" : items[key][\"to\"],\n            \"channelId\" : items[key][\"channelId\"],\n            \"createdDatetime\" : items[key][\"createdDatetime\"],\n            \"updatedDatetime\" : items[key][\"updatedDatetime\"],\n            \"content\": items[key][\"content\"][\"text\"]\n            };\n        }\n\n        this.setState({\n            data: final\n        })\n    }\n\n    // showDatatables = () => {\n    //     const columns = [\n    //         {\n    //             dataField: 'id',\n    //             text: 'ID'\n    //         }, {\n    //             dataField: 'from',\n    //             text: 'From'\n    //         }, {\n    //             dataField: 'to',\n    //             text: 'To'\n    //         }, {\n    //             dataField: 'channelId',\n    //             text: 'Channel ID'\n    //         }, {\n    //             dataField: 'content',\n    //             text: 'Content'\n    //         }, {\n    //             dataField: 'createdDatetime',\n    //             text: 'Created On'\n    //         }, {\n    //             dataField: 'updatedDatetime',\n    //             text: 'Updated On'\n    //         }\n    //     ];\n    //     return (\n    //         <BootstrapTable keyField='id' data={ this.state.items } columns={ columns } />\n    //     )\n    // }\n    \n    render() {\n        const { isLoading, success, conversationId, accessKey } = this.state;\n        return (\n            <div style={{'marginTop': '2em'}}>\n                <ToastContainer\n                    position=\"top-right\"\n                    autoClose={5000}\n                    hideProgressBar={false}\n                    newestOnTop={false}\n                    closeOnClick\n                    rtl={false}\n                    pauseOnFocusLoss\n                    draggable\n                    pauseOnHover\n                />\n                <FormGroup row>\n                    <Col md=\"4\">\n                        <Label style={{'fontSize': 'small'}}>Conv. ID</Label>\n                    </Col>\n                    <Col md=\"8\">\n                        <Input type=\"text\" disabled={isLoading} value={conversationId} onChange={(e) => this.setState({ conversationId: e.target.value })} />\n                    </Col>\n                </FormGroup>\n                <FormGroup row>\n                    <Col md=\"4\">\n                        <Label style={{'fontSize': 'small'}}>Access Key</Label>\n                    </Col>\n                    <Col md=\"8\">\n                        <Input type=\"text\" disabled={isLoading} value={accessKey} onChange={(e) => this.setState({ accessKey: e.target.value })} />\n                    </Col>\n                </FormGroup>\n                <FormGroup row>\n                    {\n                        isLoading ? \n                        <center>\n                            <HashLoader color={'#123abc'} loading={isLoading} /><br/> Please wait...\n                        </center>\n                        :\n                        <center>\n                            <Button color=\"success\" disabled={isLoading} onClick={() => this.handleSubmit()}>\n                                Convert\n                            </Button>\n                        </center>\n                    }\n                </FormGroup>\n                {\n                    isLoading ? \n                    true \n                    :\n                    (\n                        success ?\n                        // this.showDatatables()\n                        true\n                        :\n                        true\n                    )\n                }\n                <Row>\n                    \n                </Row>\n            </div>\n        )\n    }\n}\n\nexport default Converter"],"sourceRoot":""}