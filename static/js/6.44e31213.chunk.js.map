{"version":3,"sources":["containers/TheAside.js","routes.js","containers/TheContent.js","containers/TheFooter.js","containers/TheHeader.js","containers/_nav.js","containers/TheSidebar.js","containers/TheLayout.js"],"names":["React","memo","show","useSelector","state","asideShow","dispatch","useDispatch","setState","type","aside","colorScheme","size","overlaid","onShowChange","onClick","className","routes","lazy","path","exact","name","loading","fluid","fallback","map","route","idx","component","key","render","props","from","to","fixed","href","target","TheHeader","darkMode","sidebarShow","withSubheader","inHeader","val","includes","height","alt","title","_tag","icon","badge","color","text","unfoldable","items","navigation","components","CSidebarNavDivider","CSidebarNavDropdown","CSidebarNavItem","CSidebarNavTitle","TheLayout","classes","classNames"],"mappings":"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","file":"static/js/6.44e31213.chunk.js","sourcesContent":["import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  CSidebar,\n  CSidebarClose\n} from '@coreui/react'\n\nconst TheAside = () => {\n  const show = useSelector(state => state.asideShow)\n  const dispatch = useDispatch()\n  const setState = (state) => dispatch({type: 'set', asideShow: state})\n\n  return (\n    <CSidebar\n      aside\n      colorScheme='light'\n      size='lg'\n      overlaid\n      show={show}\n      onShowChange={(state) => setState(state)}\n    >\n      <CSidebarClose onClick={() => setState(false) } />\n      {/*aside content*/}\n      <div className=\"nav-underline\">\n        <div className=\"nav nav-tabs\">\n          <div className=\"nav-item\">\n            <div className=\"nav-link\">Aside</div>\n          </div>\n        </div>\n      </div>\n    </CSidebar>\n  )\n}\n\nexport default React.memo(TheAside)\n","import React from 'react'\n\nconst Dashboard = React.lazy(() => import('./views/dashboard/Dashboard'))\n\n// https://github.com/ReactTraining/react-router/tree/master/packages/react-router-config\nconst routes = [\n  { path: '/', exact: true, name: 'Home' },\n  // { path: '/Con', exact: true, name: 'Converter' },\n  // { path: '/dashboard', name: 'Dashboard', component: Dashboard },\n]\n\nexport default routes\n","import React, { Suspense } from 'react'\nimport {\n  Redirect,\n  Route,\n  Switch\n} from 'react-router-dom'\nimport { CContainer, CFade } from '@coreui/react'\n\n// routes config\nimport routes from '../routes'\n  \nconst loading = (\n  <div className=\"pt-3 text-center\">\n    <div className=\"sk-spinner sk-spinner-pulse\"></div>\n  </div>\n)\n\nconst TheContent = () => {\n  return (\n    <main className=\"c-main\">\n      <CContainer fluid>\n        <Suspense fallback={loading}>\n          <Switch>\n            {routes.map((route, idx) => {\n              return route.component && (\n                <Route\n                  key={idx}\n                  path={route.path}\n                  exact={route.exact}\n                  name={route.name}\n                  render={props => (\n                    <CFade>\n                      <route.component {...props} />\n                    </CFade>\n                  )} />\n              )\n            })}\n            <Redirect from=\"/\" to=\"/dashboard\" />\n          </Switch>\n        </Suspense>\n      </CContainer>\n    </main>\n  )\n}\n\nexport default React.memo(TheContent)\n","import React from 'react'\nimport { CFooter, CLink } from '@coreui/react'\n\nconst TheFooter = () => {\n  return (\n    <CFooter fixed={false}>\n      <div>\n        <CLink href=\"https://coreui.io/react/docs/\" target=\"_blank\">\n          Library documentation\n        </CLink>\n      </div>\n      <div className=\"ml-auto\">\n        <span className=\"mr-1\">Right text</span>\n      </div>\n    </CFooter>\n  )\n}\n\nexport default React.memo(TheFooter)\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport {\n  CHeader,\n  CHeaderBrand,\n  CHeaderNav,\n  CHeaderNavItem,\n  CHeaderNavLink,\n  CSubheader,\n  CToggler,\n  CBreadcrumbRouter,\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\n\n// routes config\nimport routes from '../routes'\n\nconst TheHeader = () => {\n  const dispatch = useDispatch()\n  const asideShow = useSelector(state => state.asideShow)\n  const darkMode = useSelector(state => state.darkMode)\n  const sidebarShow = useSelector(state => state.sidebarShow)\n\n  const toggleSidebar = () => {\n    const val = [true, 'responsive'].includes(sidebarShow) ? false : 'responsive'\n    dispatch({type: 'set', sidebarShow: val})\n  }\n\n  const toggleSidebarMobile = () => {\n    const val = [false, 'responsive'].includes(sidebarShow) ? true : 'responsive'\n    dispatch({type: 'set', sidebarShow: val})\n  }\n\n  return (\n    <CHeader withSubheader>\n      <CToggler\n        inHeader\n        className=\"ml-md-3 d-lg-none\"\n        onClick={toggleSidebarMobile}\n      />\n      <CToggler\n        inHeader\n        className=\"ml-3 d-md-down-none\"\n        onClick={toggleSidebar}\n      />\n      <CHeaderBrand className=\"mx-auto d-lg-none\" to=\"/\">\n        <CIcon name=\"logo\" height=\"48\" alt=\"Logo\"/>\n      </CHeaderBrand>\n\n      <CHeaderNav className=\"d-md-down-none mr-auto\">\n        <CHeaderNavItem className=\"px-3\" >\n          <CHeaderNavLink to=\"/dashboard\">Dashboard</CHeaderNavLink>\n        </CHeaderNavItem>\n      </CHeaderNav>\n\n      <CHeaderNav className=\"px-3\">\n        <CToggler\n          inHeader\n          className=\"ml-3 d-md-down-none\"\n          onClick={() => dispatch({type: 'set', darkMode: !darkMode})}\n          title=\"Toggle Light/Dark Mode\"\n        >\n          <CIcon name=\"cil-moon\" className=\"c-d-dark-none\" alt=\"CoreUI Icons Moon\" />\n          <CIcon name=\"cil-sun\" className=\"c-d-default-none\" alt=\"CoreUI Icons Sun\" />\n        </CToggler>\n        <CToggler\n          inHeader\n          className=\"d-md-down-none\"\n          onClick={() => dispatch({type: 'set', asideShow: !asideShow})}\n        >\n          <CIcon className=\"mr-2\" size=\"lg\" name=\"cil-applications-settings\" />\n        </CToggler>\n      </CHeaderNav>\n\n      <CSubheader className=\"px-3 justify-content-between\">\n        <CBreadcrumbRouter className=\"border-0 c-subheader-nav m-0 px-0 px-md-3\" routes={routes} />\n      </CSubheader>\n    </CHeader>\n  )\n}\n\nexport default TheHeader\n","export default [\n  {\n    _tag: 'CSidebarNavItem',\n    name: 'Dashboard',\n    to: '/dashboard',\n    icon: 'cil-speedometer',\n    badge: {\n      color: 'info',\n      text: 'NEW',\n    }\n  },\n]\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport {\n  CCreateElement,\n  CSidebar,\n  CSidebarBrand,\n  CSidebarNav,\n  CSidebarNavDivider,\n  CSidebarNavTitle,\n  CSidebarMinimizer,\n  CSidebarNavDropdown,\n  CSidebarNavItem,\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\n\n// sidebar nav config\nimport navigation from './_nav'\n\nconst TheSidebar = () => {\n  const dispatch = useDispatch()\n  const show = useSelector(state => state.sidebarShow)\n\n  return (\n    <CSidebar\n      show={show}\n      unfoldable\n      onShowChange={(val) => dispatch({type: 'set', sidebarShow: val })}\n    >\n      <CSidebarBrand className=\"d-md-down-none\" to=\"/\">\n        <CIcon\n          className=\"c-sidebar-brand-full\"\n          name=\"logo-negative\"\n          height={35}\n        />\n        <CIcon\n          className=\"c-sidebar-brand-minimized\"\n          name=\"sygnet\"\n          height={35}\n        />\n      </CSidebarBrand>\n      <CSidebarNav>\n\n        <CCreateElement\n          items={navigation}\n          components={{\n            CSidebarNavDivider,\n            CSidebarNavDropdown,\n            CSidebarNavItem,\n            CSidebarNavTitle\n          }}\n          />\n\n      </CSidebarNav>\n      <CSidebarMinimizer className=\"c-d-md-down-none\"/>\n    </CSidebar>\n  )\n}\n\nexport default React.memo(TheSidebar)\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport classNames from 'classnames'\nimport {\n  TheContent,\n  TheSidebar,\n  TheAside,\n  TheFooter,\n  TheHeader\n} from './index'\n\nconst TheLayout = () => {\n  const darkMode = useSelector(state => state.darkMode)\n  const classes = classNames(\n    'c-app c-default-layout',\n    darkMode && 'c-dark-theme'\n  )\n\n  return (\n    <div className={classes}>\n      <TheSidebar/>\n      <TheAside/>\n      <div className=\"c-wrapper\">\n        <TheHeader/>\n        <div className=\"c-body\">\n          <TheContent/>\n        </div>\n        <TheFooter/>\n      </div>\n    </div>\n  )\n}\n\nexport default TheLayout\n"],"sourceRoot":""}